// <auto-generated />
using System;
using FarmAdvisor.DataAccess.MSSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmAdvisor.DataAccess.MSSQL.Migrations
{
    [DbContext(typeof(FarmAdvisorDbContext))]
    [Migration("20221207211943_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmDto", b =>
                {
                    b.Property<Guid>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FarmId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmFieldDto", b =>
                {
                    b.Property<Guid>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Altitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FarmDtoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Polygon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId");

                    b.HasIndex("FarmDtoId");

                    b.ToTable("FarmFeilds");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.SensorDto", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BatteryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CuttingDateCaclculated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmFeildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FarmFieldFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastCommunication")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<int>("OptimalGDD")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("SensorId");

                    b.HasIndex("FarmFieldFieldId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.UserDto", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("FarmId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmFieldDto", b =>
                {
                    b.HasOne("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmDto", "Farm")
                        .WithMany("FarmFeilds")
                        .HasForeignKey("FarmDtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.SensorDto", b =>
                {
                    b.HasOne("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmFieldDto", "FarmField")
                        .WithMany()
                        .HasForeignKey("FarmFieldFieldId");

                    b.Navigation("FarmField");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.UserDto", b =>
                {
                    b.HasOne("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmDto", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("FarmAdvisor.DataAccess.MSSQL.Dtos.FarmDto", b =>
                {
                    b.Navigation("FarmFeilds");
                });
#pragma warning restore 612, 618
        }
    }
}
